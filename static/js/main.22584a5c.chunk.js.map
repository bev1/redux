{"version":3,"sources":["logo.svg","components/Home.js","containers/Posts.js","containers/Users.js","App.js","actions/posts.js","actions/users.js","serviceWorker.js","reducers/postsReducer.js","reducers/usersReducer.js","reducers/index.js","store/configureStore.js","index.js"],"names":["module","exports","Home","className","src","this","props","logo","alt","React","Component","Posts","state","currentPage","posts","length","getPosts","page","setState","isFetching","slice","map","item","index","key","title","toUpperCase","body","onClick","e","shiftPage","connect","Users","users","initialUsers","getUsers","nextProps","term","hits","res","filter","x","Object","values","join","toLowerCase","includes","onSearchTextChange","onSearchChange","onSearchButtonClick","placeHolderText","data","name","username","company","email","phone","App","getPostsAction","getUsersAction","to","path","store","dispatch","type","payload","axios","get","then","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","action","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.22584a5c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nclass Home extends React.Component {\r\n    render () {\r\n        return (\r\n            <div className=\"home-wrap\">\r\n                <img src={this.props.logo} className=\"App-logo\" alt=\"logo\" />\r\n                <div className=\"my-name\">Evgeniy Boyko</div>\r\n            </div>\r\n        );\r\n    }\r\n  }\r\n  \r\n  export default Home;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Posts extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      currentPage: 10\r\n    };\r\n  }\r\n  componentWillMount() {\r\n    if(!this.props.posts.posts.length) {\r\n      this.props.getPosts();\r\n    }\r\n  }\r\n  shiftPage(page) {\r\n    this.setState({ currentPage: +page });\r\n  }\r\n  render() {\r\n    let posts = this.props.posts.posts;\r\n    const pages = [1,2,3,4,5,6,7,8,9,10]\r\n    return (\r\n      <div className=\"posts-wrap\">\r\n        {\r\n          this.props.posts.isFetching ?\r\n          <div className=\"preloader\"><div className=\"loader\"></div></div> : <div>\r\n          <div className='row'>\r\n            {posts.slice(this.state.currentPage -10, this.state.currentPage).map((item, index) => {\r\n              return <div className='col-md-4' key={index}>\r\n                <p>{item.title.toUpperCase()}</p>\r\n                <p>{item.body}</p>\r\n              </div>\r\n            })}\r\n          </div>\r\n          <ul className='pagination'>\r\n            {\r\n              pages.map(item => {\r\n                return <li className='pag-item' key={item} onClick={(e) => this.shiftPage(`${item}0`)}>{item}</li>\r\n              })\r\n            }\r\n          </ul></div>\r\n        }\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {};\r\n}\r\n\r\nexport default connect(mapStateToProps)(Posts);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport SearchBar from 'react-js-search';\r\n\r\nclass Users extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      users: [],\r\n      initialUsers: []\r\n    };\r\n  }\r\n  componentWillMount() {\r\n      this.props.getUsers();\r\n  }\r\n  componentWillReceiveProps(nextProps){\r\n    if(nextProps.users.users !== false){\r\n      this.setState({ \r\n        users: nextProps.users.users,\r\n        initialUsers: nextProps.users.users\r\n      });\r\n    }\r\n  }\r\n  onSearchChange(term,hits) {\r\n    let res = this.state.initialUsers.filter(x => Object.values(x).join(' ').toLowerCase().includes(term.toLowerCase()));\r\n    this.setState({ users: res });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"users-wrap\">\r\n        <SearchBar \r\n          onSearchTextChange={(term,hits) => {this.onSearchChange(term,hits)}}\r\n          onSearchButtonClick={(term,hits) => {this.onSearchChange(term,hits)}}\r\n          placeHolderText={\"Search here...\"}\r\n          data={this.state.initialUsers}\r\n        />\r\n      {\r\n        this.props.users.isFetching ?\r\n        <div className=\"preloader\"><div className=\"loader\"></div></div> : <div>\r\n        <div className='row'>\r\n          {this.state.users.map((item, index) => {\r\n            return <div className='col-md-4' key={index}>\r\n              <p>{item.name.toUpperCase()}</p>\r\n              <p>Username: {item.username}</p>\r\n              <p>Company: {item.company.name}</p>\r\n              <p>Email: {item.email}</p>\r\n              <p>Phone: {item.phone}</p>\r\n            </div>\r\n          })}\r\n        </div>\r\n        </div>\r\n      }\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {};\r\n}\r\n\r\nexport default connect(mapStateToProps)(Users);","import React from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport { connect } from 'react-redux'\nimport Home from './components/Home';\nimport Posts from './containers/Posts';\nimport Users from './containers/Users';\nimport { getPosts } from './actions/posts';\nimport { getUsers } from './actions/users';\n\nclass App extends React.Component {\n  render() {\n    const { users, posts, getPostsAction, getUsersAction } = this.props\n    return (\n      <Router>\n        <div className=\"container\">\n          <nav>\n            <ul>\n              <li>\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li>\n                <Link to=\"/users\">Users</Link>\n              </li>\n              <li>\n                <Link to=\"/posts\">Posts</Link>\n              </li>\n            </ul>\n          </nav>\n          <Switch>\n            <Route path=\"/posts\">\n              <Posts posts={posts} getPosts={getPostsAction} />\n            </Route>\n            <Route path=\"/users\">\n              <Users users={users} getUsers={getUsersAction}/>\n            </Route>\n            <Route path=\"/\">\n              <Home logo={logo}/>\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nconst mapStateToProps = store => {\n  return {\n    users: store.users,\n    posts: store.posts\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getPostsAction: posts => dispatch(getPosts(posts)),\n    getUsersAction: users => dispatch(getUsers(users))\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App)","import axios from 'axios';\r\nexport const GET_POSTS_REQUEST = 'GET_POSTS_REQUEST'\r\nexport const GET_POSTS_SUCCESS = 'GET_POSTS_SUCCESS'\r\n\r\nexport function getPosts(posts) {\r\n    return dispatch => {\r\n      dispatch({\r\n        type: GET_POSTS_REQUEST,\r\n        payload: posts\r\n      })\r\n        axios.get('https://jsonplaceholder.typicode.com/posts')\r\n        .then(posts => {\r\n          dispatch({\r\n            type: GET_POSTS_SUCCESS,\r\n            payload: [...posts.data]\r\n          })\r\n        })\r\n    }\r\n  }","import axios from 'axios';\r\nexport const GET_USERS_REQUEST = 'GET_USERS_REQUEST'\r\nexport const GET_USERS_SUCCESS = 'GET_USERS_SUCCESS'\r\n\r\nexport function getUsers(users) {\r\n    return dispatch => {\r\n      dispatch({\r\n        type: GET_USERS_REQUEST,\r\n        payload: users\r\n      })\r\n        axios.get('https://jsonplaceholder.typicode.com/users')\r\n        .then(users => {\r\n          dispatch({\r\n            type: GET_USERS_SUCCESS,\r\n            payload: [...users.data]\r\n          })\r\n        })\r\n    }\r\n  }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n    posts: [],\r\n    isFetching: false\r\n  }\r\n  \r\n  export function postsReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n      case 'GET_POSTS_REQUEST':\r\n        return { ...state, posts: action.payload, isFetching: true }\r\n      case 'GET_POSTS_SUCCESS':\r\n        return { ...state, posts: action.payload, isFetching: false }\r\n  \r\n      default:\r\n        return state\r\n    }\r\n  }","const initialState = {\r\n    users: [],\r\n    isFetching: false\r\n  }\r\n  \r\n  export function usersReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n      case 'GET_USERS_REQUEST':\r\n        return { ...state, users: action.payload, isFetching: true }\r\n      case 'GET_USERS_SUCCESS':\r\n        return { ...state, users: action.payload, isFetching: false }\r\n  \r\n      default:\r\n        return state\r\n    }\r\n  }","import { combineReducers } from 'redux'\r\nimport { postsReducer } from './postsReducer'\r\nimport { usersReducer } from './usersReducer'\r\n\r\nexport const rootReducer = combineReducers({\r\n  posts: postsReducer,\r\n  users: usersReducer\r\n})","import { createStore, applyMiddleware } from 'redux'\r\nimport { rootReducer} from '../reducers';\r\nimport thunk from 'redux-thunk';\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store/configureStore'\n\nReactDOM.render(\n  \n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}